From 53c8b32ff65fdc86a38514a10ddbd132a97fc896 Mon Sep 17 00:00:00 2001
From: boogie <boogiepop@gmx.com>
Date: Sat, 13 Jan 2024 19:39:52 +0100
Subject: [PATCH 1/2] windowing/gbm: Dynamic plane selection

This commit allows kodi to select gui and video planes according to
format and modifier combination and sorts to gui plane on top of video
plane if zpos is supported and not immutable by the planes.
---
 .../HwDecRender/RendererDRMPRIME.cpp          |  4 +-
 xbmc/windowing/gbm/drm/DRMAtomic.cpp          | 43 +++++++++++++++++++
 xbmc/windowing/gbm/drm/DRMAtomic.h            |  1 +
 xbmc/windowing/gbm/drm/DRMObject.cpp          | 30 +++++++++++++
 xbmc/windowing/gbm/drm/DRMObject.h            |  2 +
 xbmc/windowing/gbm/drm/DRMUtils.cpp           | 21 +++++----
 xbmc/windowing/gbm/drm/DRMUtils.h             |  4 +-
 7 files changed, 93 insertions(+), 12 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
index a07b4f744048e..04d42c09828b0 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
@@ -77,9 +77,11 @@ CBaseRenderer* CRendererDRMPRIME::Create(CVideoBuffer* buffer)
     if (!plane)
       return nullptr;
 
-    if (!plane->SupportsFormatAndModifier(format, modifier))
+    if (!drm->FindPlanes(format, modifier))
       return nullptr;
 
+    drm->SortPlanes();
+
     return new CRendererDRMPRIME();
   }
 
diff --git a/xbmc/windowing/gbm/drm/DRMAtomic.cpp b/xbmc/windowing/gbm/drm/DRMAtomic.cpp
index ff7f137d60e65..467c23b3fbe14 100644
--- a/xbmc/windowing/gbm/drm/DRMAtomic.cpp
+++ b/xbmc/windowing/gbm/drm/DRMAtomic.cpp
@@ -61,6 +61,49 @@ bool CDRMAtomic::SetScalingFilter(CDRMObject* object, const char* name, const ch
   return true;
 }
 
+void CDRMAtomic::SortPlanes()
+{
+  bool supports_zpos = m_gui_plane->SupportsProperty("zpos");
+  bool zpos_immutable = supports_zpos && m_gui_plane->IsPropertyImmutable("zpos").value();
+
+  auto crtc_offset = std::distance(
+      m_crtcs.begin(),
+      std::find_if(m_crtcs.begin(), m_crtcs.end(),
+                   [this](auto& crtc) { return crtc->GetCrtcId() == m_crtc->GetCrtcId(); }));
+
+  // Disable unused planes after planes are re-selected in the active crtc
+  for (auto& plane : m_planes)
+  {
+    if (!(plane.get()->GetPossibleCrtcs() & (1 << crtc_offset)))
+      continue;
+
+    if ((m_video_plane == nullptr || m_video_plane->GetId() != plane.get()->GetId()) &&
+        (m_gui_plane == nullptr || m_gui_plane->GetId() != plane.get()->GetId()))
+    {
+      CLog::Log(LOGDEBUG, "CDRMUtils::{} - disabled plane {}", __FUNCTION__,
+                plane.get()->GetPlaneId());
+      AddProperty(plane.get(), "FB_ID", 0);
+      AddProperty(plane.get(), "CRTC_ID", 0);
+    }
+  }
+
+  if (!supports_zpos || zpos_immutable)
+    return;
+
+  // re-sort the video and gui planes
+  std::optional<uint64_t*> limits = m_gui_plane->GetRangePropertyLimits("zpos");
+
+  if (!limits)
+    return;
+
+  m_gui_plane->SetProperty("zpos", limits.value()[1]);
+  m_video_plane->SetProperty("zpos", limits.value()[0]);
+  CLog::Log(LOGDEBUG, "CDRMUtils::{} - gui plane id,zpos: {}, {}", __FUNCTION__,
+            m_gui_plane->GetId(), limits.value()[0] + 1);
+  CLog::Log(LOGDEBUG, "CDRMUtils::{} - video plane id,zpos: {}, {}", __FUNCTION__,
+            m_video_plane->GetId(), limits.value()[0]);
+}
+
 void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool videoLayer)
 {
   uint32_t blob_id;
diff --git a/xbmc/windowing/gbm/drm/DRMAtomic.h b/xbmc/windowing/gbm/drm/DRMAtomic.h
index 6b196575878fe..ee6314ffafbc0 100644
--- a/xbmc/windowing/gbm/drm/DRMAtomic.h
+++ b/xbmc/windowing/gbm/drm/DRMAtomic.h
@@ -33,6 +33,7 @@ class CDRMAtomic : public CDRMUtils
   bool InitDrm() override;
   void DestroyDrm() override;
   bool AddProperty(CDRMObject* object, const char* name, uint64_t value);
+  void SortPlanes();
 
   bool DisplayHardwareScalingEnabled();
 
diff --git a/xbmc/windowing/gbm/drm/DRMObject.cpp b/xbmc/windowing/gbm/drm/DRMObject.cpp
index 5ffce40fa31df..2fafdc7b9546e 100644
--- a/xbmc/windowing/gbm/drm/DRMObject.cpp
+++ b/xbmc/windowing/gbm/drm/DRMObject.cpp
@@ -105,6 +105,25 @@ std::optional<uint64_t> CDRMObject::GetPropertyValue(std::string_view name,
   return {};
 }
 
+std::optional<uint64_t*> CDRMObject::GetRangePropertyLimits(std::string_view name)
+{
+  auto property = std::find_if(m_propsInfo.begin(), m_propsInfo.end(),
+                               [&name](const auto& prop) { return prop->name == name; });
+
+  if (property == m_propsInfo.end())
+    return {};
+
+  auto prop = property->get();
+
+  if (!static_cast<bool>(drm_property_type_is(prop, DRM_MODE_PROP_RANGE)))
+    return {};
+
+  if (prop->count_values != 2)
+    return {};
+
+  return prop->values;
+}
+
 bool CDRMObject::SetProperty(const std::string& name, uint64_t value)
 {
   auto property = std::find_if(m_propsInfo.begin(), m_propsInfo.end(),
@@ -130,3 +149,14 @@ bool CDRMObject::SupportsProperty(const std::string& name)
 
   return false;
 }
+
+std::optional<bool> CDRMObject::IsPropertyImmutable(const std::string& name)
+{
+  auto property = std::find_if(m_propsInfo.begin(), m_propsInfo.end(),
+                               [&name](const auto& prop) { return prop->name == name; });
+
+  if (property == m_propsInfo.end())
+    return {};
+
+  return static_cast<bool>(drm_property_type_is(property->get(), DRM_MODE_PROP_IMMUTABLE));
+}
diff --git a/xbmc/windowing/gbm/drm/DRMObject.h b/xbmc/windowing/gbm/drm/DRMObject.h
index c4200b1a864dc..bee880de20ebd 100644
--- a/xbmc/windowing/gbm/drm/DRMObject.h
+++ b/xbmc/windowing/gbm/drm/DRMObject.h
@@ -40,6 +40,8 @@ class CDRMObject
 
   bool SetProperty(const std::string& name, uint64_t value);
   bool SupportsProperty(const std::string& name);
+  std::optional<bool> IsPropertyImmutable(const std::string& name);
+  std::optional<uint64_t*> GetRangePropertyLimits(std::string_view name);
 
 protected:
   explicit CDRMObject(int fd);
diff --git a/xbmc/windowing/gbm/drm/DRMUtils.cpp b/xbmc/windowing/gbm/drm/DRMUtils.cpp
index 3dd4ee97831d3..e3aab14d3a39b 100644
--- a/xbmc/windowing/gbm/drm/DRMUtils.cpp
+++ b/xbmc/windowing/gbm/drm/DRMUtils.cpp
@@ -181,20 +181,23 @@ bool CDRMUtils::FindPreferredMode()
   return true;
 }
 
-bool CDRMUtils::FindPlanes()
+bool CDRMUtils::FindPlanes(uint32_t format, uint64_t modifier)
 {
   for (size_t i = 0; i < m_crtcs.size(); i++)
   {
     if (!(m_encoder->GetPossibleCrtcs() & (1 << i)))
       continue;
 
-    auto videoPlane = std::find_if(m_planes.begin(), m_planes.end(), [&i](auto& plane) {
-      if (plane->GetPossibleCrtcs() & (1 << i))
-      {
-        return plane->SupportsFormat(DRM_FORMAT_NV12);
-      }
-      return false;
-    });
+    auto videoPlane =
+        std::find_if(m_planes.begin(), m_planes.end(),
+                     [&i, &format, &modifier](auto& plane)
+                     {
+                       if (plane->GetPossibleCrtcs() & (1 << i))
+                       {
+                         return plane->SupportsFormatAndModifier(format, modifier);
+                       }
+                       return false;
+                     });
 
     uint32_t videoPlaneId{0};
 
@@ -467,7 +470,7 @@ bool CDRMUtils::InitDrm()
   if (!FindCrtc())
     return false;
 
-  if (!FindPlanes())
+  if (!FindPlanes(DRM_FORMAT_NV12, DRM_FORMAT_MOD_LINEAR))
     return false;
 
   if (!FindPreferredMode())
diff --git a/xbmc/windowing/gbm/drm/DRMUtils.h b/xbmc/windowing/gbm/drm/DRMUtils.h
index f92f716fc4f3b..fcf9d772e335c 100644
--- a/xbmc/windowing/gbm/drm/DRMUtils.h
+++ b/xbmc/windowing/gbm/drm/DRMUtils.h
@@ -64,6 +64,7 @@ class CDRMUtils
   static uint32_t FourCCWithoutAlpha(uint32_t fourcc);
 
   void SetInFenceFd(int fd) { m_inFenceFd = fd; }
+  bool FindPlanes(uint32_t format, uint64_t modifier);
   int TakeOutFenceFd()
   {
     int fd{-1};
@@ -89,13 +90,13 @@ class CDRMUtils
   int m_inFenceFd{-1};
   int m_outFenceFd{-1};
 
+  std::vector<std::unique_ptr<CDRMCrtc>> m_crtcs;
   std::vector<std::unique_ptr<CDRMPlane>> m_planes;
 
 private:
   bool FindConnector();
   bool FindEncoder();
   bool FindCrtc();
-  bool FindPlanes();
   bool FindPreferredMode();
   bool RestoreOriginalMode();
   RESOLUTION_INFO GetResolutionInfo(drmModeModeInfoPtr mode);
@@ -106,7 +107,6 @@ class CDRMUtils
 
   std::vector<std::unique_ptr<CDRMConnector>> m_connectors;
   std::vector<std::unique_ptr<CDRMEncoder>> m_encoders;
-  std::vector<std::unique_ptr<CDRMCrtc>> m_crtcs;
 };
 
 }

From a9c87ec69cce3fc10bd6162d402e2775554f58e9 Mon Sep 17 00:00:00 2001
From: boogie <boogiepop@gmx.com>
Date: Sat, 13 Jan 2024 21:48:53 +0100
Subject: [PATCH 2/2] VideoLayerBridgeDRMPRIME: Use crop fields to render the
 picture offsets

Hardware decoders when used with AFBC compression, may output picture
with offsets which may be different for each frame. Since this offset is
applied after the decompression is done, only way to represent this in
SRC_X and SRC_Y plane props. This commits utilizes AVFrame crop fields
to pass picture offsets.
---
 .../cores/VideoPlayer/Buffers/VideoBufferDRMPRIME.h |  2 ++
 .../VideoPlayer/DVDCodecs/Video/DVDVideoCodec.cpp   |  2 ++
 .../VideoPlayer/DVDCodecs/Video/DVDVideoCodec.h     |  2 ++
 .../DVDCodecs/Video/DVDVideoCodecDRMPRIME.cpp       | 13 +++++++++++++
 .../HwDecRender/VideoLayerBridgeDRMPRIME.cpp        | 11 ++++++-----
 5 files changed, 25 insertions(+), 5 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/Buffers/VideoBufferDRMPRIME.h b/xbmc/cores/VideoPlayer/Buffers/VideoBufferDRMPRIME.h
index b83ee8ca68a5f..495c42890925b 100644
--- a/xbmc/cores/VideoPlayer/Buffers/VideoBufferDRMPRIME.h
+++ b/xbmc/cores/VideoPlayer/Buffers/VideoBufferDRMPRIME.h
@@ -54,6 +54,8 @@ class CVideoBufferDRMPRIME : public CVideoBuffer
   virtual const VideoPicture& GetPicture() const { return m_picture; }
   virtual uint32_t GetWidth() const { return GetPicture().iWidth; }
   virtual uint32_t GetHeight() const { return GetPicture().iHeight; }
+  virtual uint32_t GetXOffset() const { return GetPicture().iXOffset; }
+  virtual uint32_t GetYOffset() const { return GetPicture().iYOffset; }
 
   virtual AVDRMFrameDescriptor* GetDescriptor() const = 0;
   virtual bool IsValid() const { return true; }
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodec.cpp
index 0d986e9154093..abfc937f5a0d7 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodec.cpp
@@ -56,6 +56,8 @@ void VideoPicture::Reset()
 
   iWidth = 0;
   iHeight = 0;
+  iXOffset = 0;
+  iYOffset = 0;
   iDisplayWidth = 0;
   iDisplayHeight = 0;
 }
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodec.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodec.h
index 3c55a7b06c5e7..7a4b0ef3ecbe2 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodec.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodec.h
@@ -73,6 +73,8 @@ struct VideoPicture
 
   unsigned int iWidth;
   unsigned int iHeight;
+  unsigned int iXOffset;
+  unsigned int iYOffset;
   unsigned int iDisplayWidth;           //< width of the picture without black bars
   unsigned int iDisplayHeight;          //< height of the picture without black bars
 
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.cpp
index eb2943bb8ccb9..75ec720346ae7 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.cpp
@@ -506,6 +506,19 @@ void CDVDVideoCodecDRMPRIME::SetPictureParams(VideoPicture* pVideoPicture)
   pVideoPicture->iWidth = m_pFrame->width;
   pVideoPicture->iHeight = m_pFrame->height;
 
+  /* according to ffmpeg devs crop fields in AVFrame are not always maintained actively
+   * and may cause under-shot buffers or mis-aligned strides if not implemented correctly
+   * in decoders. drm_prime frames on the other hand has their own memory allocators,
+   * and as long as the plane number is single, there should be no future regression
+   * related to usage of crop fields.
+   */
+  AVDRMFrameDescriptor* desc = reinterpret_cast<AVDRMFrameDescriptor*>(m_pFrame->data[0]);
+  if (m_pFrame->format == AV_PIX_FMT_DRM_PRIME && desc->nb_layers == 1)
+  {
+    pVideoPicture->iXOffset = m_pFrame->crop_left;
+    pVideoPicture->iYOffset = m_pFrame->crop_top;
+  }
+
   double aspect_ratio = 0;
   AVRational pixel_aspect = m_pFrame->sample_aspect_ratio;
   if (pixel_aspect.num)
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/VideoLayerBridgeDRMPRIME.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/VideoLayerBridgeDRMPRIME.cpp
index 34d1ab6235591..33db29b1408c2 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/VideoLayerBridgeDRMPRIME.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/VideoLayerBridgeDRMPRIME.cpp
@@ -118,9 +118,10 @@ bool CVideoLayerBridgeDRMPRIME::Map(CVideoBufferDRMPRIME* buffer)
     flags = DRM_MODE_FB_MODIFIERS;
 
   // add the video frame FB
-  ret = drmModeAddFB2WithModifiers(m_DRM->GetFileDescriptor(), buffer->GetWidth(),
-                                   buffer->GetHeight(), layer->format, handles, pitches, offsets,
-                                   modifier, &buffer->m_fb_id, flags);
+  ret = drmModeAddFB2WithModifiers(m_DRM->GetFileDescriptor(),
+                                   buffer->GetWidth() + buffer->GetXOffset(),
+                                   buffer->GetHeight() + buffer->GetYOffset(), layer->format,
+                                   handles, pitches, offsets, modifier, &buffer->m_fb_id, flags);
   if (ret < 0)
   {
     CLog::Log(LOGERROR, "CVideoLayerBridgeDRMPRIME::{} - failed to add fb {}, ret = {}",
@@ -188,8 +189,8 @@ void CVideoLayerBridgeDRMPRIME::SetVideoPlane(CVideoBufferDRMPRIME* buffer, cons
   auto plane = m_DRM->GetVideoPlane();
   m_DRM->AddProperty(plane, "FB_ID", buffer->m_fb_id);
   m_DRM->AddProperty(plane, "CRTC_ID", m_DRM->GetCrtc()->GetCrtcId());
-  m_DRM->AddProperty(plane, "SRC_X", 0);
-  m_DRM->AddProperty(plane, "SRC_Y", 0);
+  m_DRM->AddProperty(plane, "SRC_X", buffer->GetXOffset() << 16);
+  m_DRM->AddProperty(plane, "SRC_Y", buffer->GetYOffset() << 16);
   m_DRM->AddProperty(plane, "SRC_W", buffer->GetWidth() << 16);
   m_DRM->AddProperty(plane, "SRC_H", buffer->GetHeight() << 16);
   m_DRM->AddProperty(plane, "CRTC_X", static_cast<int32_t>(destRect.x1) & ~1);
